// server.js - –°–µ—Ä–≤–µ—Ä —Å Express, WebSocket –∏ Supabase –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω—é

// --- –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ ---
const express = require('express');
const WebSocket = require('ws');
const path = require('path');
const { createClient } = require('@supabase/supabase-js');

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Express ---
const app = express();
const PORT = process.env.PORT || 3000;

// --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Supabase ---
// –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (.env —Ñ–∞–π–ª)
const supabaseUrl = process.env.SUPABASE_URL || 'https://your-project-id.supabase.co';
const supabaseKey = process.env.SUPABASE_KEY || 'your-public-anon-key';
const supabase = createClient(supabaseUrl, supabaseKey);

// --- –ö—ç—à –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ—Ç–¥–∞—á–∏ –∫–ª–∏–µ–Ω—Ç–∞–º ---
let menuCache = {
    menu: [],
    wallet: { kisses: 10, scratches: 5, massage: 2, licks: 1 },
    lastUpdated: new Date().toISOString()
};

// --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Express Middleware ---
app.use(express.static(__dirname)); // –î–ª—è –æ—Ç–¥–∞—á–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ (index.html, css, js)
app.use(express.json({ limit: '10mb' })); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è JSON, –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ base64

// --- –§—É–Ω–∫—Ü–∏–∏ ---

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö (–º–µ–Ω—é –∏ –∫–æ—à–µ–ª–µ–∫) –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Supabase –≤ –∫—ç—à
 */
async function loadFromDatabase() {
    try {
        // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –±–ª—é–¥–∞ –∏–∑ 'menu_items'
        const { data: menuData, error: menuError } = await supabase
            .from('menu_items')
            .select('*')
            .order('created_at', { ascending: false });

        if (menuError) throw menuError;

        // 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∞ –∏–∑ 'wallet'
        let walletData = menuCache.wallet; // –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏
        try {
            const { data: wallet, error: walletError } = await supabase
                .from('wallet')
                .select('*')
                .eq('id', 1) // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –∫–æ—à–µ–ª—å–∫–∞ –≤—Å–µ–≥–¥–∞ id = 1
                .single();

            if (walletError && walletError.code !== 'PGRST116') { // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫"
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—à–µ–ª—å–∫–∞:', walletError);
            } else if (wallet) {
                walletData = wallet;
            }
        } catch (e) {
            console.log('–¢–∞–±–ª–∏—Ü–∞ `wallet` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.');
        }

        // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –≤ –∫—ç—à
        menuCache = {
            menu: menuData || [],
            wallet: walletData,
            lastUpdated: new Date().toISOString()
        };

        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${menuCache.menu.length} –±–ª—é–¥ –∏ –∫–æ—à–µ–ª–µ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.`);
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –ë–î:', error.message);
    }
}

/**
 * –†–∞—Å—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º WebSocket –∫–ª–∏–µ–Ω—Ç–∞–º
 * @param {object} message - –û–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
function broadcast(message) {
    const messageStr = JSON.stringify(message);
    clients.forEach(client => {
        if (client.readyState === WebSocket.OPEN) {
            client.send(messageStr);
        }
    });
}


// --- API –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã ---

// GET /api/menu: –û—Ç–¥–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω—é –∏ –∫–æ—à–µ–ª—å–∫–∞ –∏–∑ –∫—ç—à–∞
app.get('/api/menu', (req, res) => {
    res.json(menuCache);
});

// POST /api/menu: –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –æ–±–Ω–æ–≤–ª—è–µ—Ç –ë–î –∏ –∫—ç—à, —Ä–∞—Å—Å—ã–ª–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
app.post('/api/menu', async (req, res) => {
    try {
        const newData = req.body;

        // 1. –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—à–µ–ª–µ–∫, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω
        if (newData.wallet) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º 'upsert' –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è
            const { error } = await supabase
                .from('wallet')
                .upsert({ id: 1, ...newData.wallet }, { onConflict: 'id' });

            if (error) {
                console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞:', error);
                // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç.–∫. –º–µ–Ω—é –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∞–∂–Ω–µ–µ
            }
        }

        const currentIds = menuCache.menu.map(item => item.id);
        const newIds = newData.menu.map(item => item.id);

        // 2. –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        const toDelete = currentIds.filter(id => !newIds.includes(id));
        if (toDelete.length > 0) {
            const { error } = await supabase
                .from('menu_items')
                .delete()
                .in('id', toDelete);

            if (error) throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: ${error.message}`);
        }

        // 3. –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        for (const item of newData.menu) {
            const { id, ...itemData } = item;

            // –ú–∏–≥—Ä–∞—Ü–∏—è —Å–æ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ `kissPrice` –Ω–∞ –Ω–æ–≤—ã–π `prices`
            if (itemData.kissPrice && !itemData.prices) {
                itemData.prices = {
                    kisses: itemData.kissPrice,
                    scratches: 0,
                    massage: 0,
                    licks: 0
                };
                delete itemData.kissPrice; // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ
            }

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º 'upsert' –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–ª–∏ –≤—Å—Ç–∞–≤–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
            const { error } = await supabase
                .from('menu_items')
                .upsert({ id, ...itemData }, { onConflict: 'id' });

            if (error) throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ ${id}: ${error.message}`);
        }

        // 4. –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        menuCache = {
            menu: newData.menu,
            wallet: newData.wallet || menuCache.wallet,
            lastUpdated: new Date().toISOString()
        };

        // 5. –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        broadcast({
            type: 'update',
            data: menuCache
        });

        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ —Ä–∞–∑–æ—Å–ª–∞–Ω—ã –∫–ª–∏–µ–Ω—Ç–∞–º.');
        res.json({ success: true, message: '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã' });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
        res.status(500).json({ success: false, error: error.message });
    }
});

// GET /health: –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
app.get('/health', (req, res) => {
    res.json({
        status: 'ok',
        uptime: process.uptime(),
        itemsCount: menuCache.menu.length,
        lastUpdated: menuCache.lastUpdated,
        database: supabaseUrl.includes('your-project') ? 'not configured' : 'connected'
    });
});


// --- –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ---

// –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
const server = app.listen(PORT, () => {
    console.log(`\nüç≥ –°–µ—Ä–≤–µ—Ä –º–µ–Ω—é –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}!`);
    console.log(`   ${process.env.RENDER ? '‚òÅÔ∏è  –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Render.com' : 'üíª –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º'}`);
    console.log(`   üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${supabaseUrl.includes('your-project') ? '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' : 'Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω'}\n`);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    loadFromDatabase();
});


// --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebSocket Server ---
const wss = new WebSocket.Server({ server });
const clients = new Set();

wss.on('connection', (ws) => {
    clients.add(ws);
    console.log('‚úÖ –ù–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ. –í—Å–µ–≥–æ:', clients.size);

    // –ü—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
    ws.send(JSON.stringify({
        type: 'init',
        data: menuCache
    }));

    // –ü–∏–Ω–≥ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–≤–∞–∂–Ω–æ –¥–ª—è PaaS —Ç–∏–ø–∞ Heroku/Render)
    const pingInterval = setInterval(() => {
        if (ws.readyState === WebSocket.OPEN) {
            ws.ping();
        }
    }, 30000);

    ws.on('close', () => {
        clients.delete(ws);
        clearInterval(pingInterval);
        console.log('‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ. –û—Å—Ç–∞–ª–æ—Å—å:', clients.size);
    });
});

// --- –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ Supabase (Realtime) ---
// –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é –≤ –±–∞–∑–µ
if (!supabaseUrl.includes('your-project')) {
    const subscription = supabase
        .channel('schema-db-changes')
        .on(
            'postgres_changes',
            { event: '*', schema: 'public' },
            async (payload) => {
                console.log('üì° –ü–æ–ª—É—á–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–∑ –ë–î Supabase:', payload.eventType);
                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
                await loadFromDatabase();
                // –†–∞—Å—Å—ã–ª–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
                broadcast({
                    type: 'update',
                    data: menuCache
                });
            }
        )
        .subscribe();
    console.log('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ Supabase.');
}
