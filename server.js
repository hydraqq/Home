// server.js - –°–µ—Ä–≤–µ—Ä —Å Supabase –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
const express = require('express');
const WebSocket = require('ws');
const path = require('path');
const { createClient } = require('@supabase/supabase-js');

const app = express();
const PORT = process.env.PORT || 3000;

// Supabase –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏!
const supabaseUrl = process.env.SUPABASE_URL || 'https://your-project.supabase.co';
const supabaseKey = process.env.SUPABASE_KEY || 'your-anon-key';
const supabase = createClient(supabaseUrl, supabaseKey);

// –ö—ç—à –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
let menuCache = { 
    menu: [], 
    wallet: { kisses: 10, scratches: 5, massage: 2, licks: 1 },
    lastUpdated: new Date().toISOString() 
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Express
app.use(express.static(__dirname));
app.use(express.json({ limit: '10mb' }));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ WebSocket
process.on('uncaughtException', (error) => {
    console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
async function loadFromDatabase() {
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–ª—é–¥–∞
        const { data: menuData, error: menuError } = await supabase
            .from('menu_items')
            .select('*')
            .order('created_at', { ascending: false });
        
        if (menuError && menuError.code !== 'PGRST116') {
            console.log('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é:', menuError);
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—à–µ–ª–µ–∫
        let walletData = { kisses: 10, scratches: 5, massage: 2, licks: 1 };
        
        try {
            const { data: wallet, error: walletError } = await supabase
                .from('wallet')
                .select('*')
                .eq('id', 1)
                .single();
            
            if (wallet && !walletError) {
                // –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö licks –≤ dishes –∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ licks
                if (wallet.dishes !== undefined && wallet.licks === undefined) {
                    wallet.licks = wallet.dishes;
                    delete wallet.dishes;
                }
                walletData = wallet;
            }
        } catch (e) {
            console.log('–¢–∞–±–ª–∏—Ü–∞ wallet –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
        }
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –º–µ–Ω—é
        if (menuData) {
            menuData.forEach(item => {
                // –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —Ü–µ–Ω
                if (item.kissPrice && !item.prices) {
                    item.prices = {
                        kisses: item.kissPrice,
                        scratches: 0,
                        massage: 0,
                        licks: 0
                    };
                    delete item.kissPrice;
                }
                
                // –ú–∏–≥—Ä–∞—Ü–∏—è dishes –≤ licks –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                if (item.prices && item.prices.dishes !== undefined) {
                    item.prices.licks = item.prices.dishes;
                    delete item.prices.dishes;
                }
            });
        }
        
        menuCache = {
            menu: menuData || [],
            wallet: walletData,
            lastUpdated: new Date().toISOString()
        };
        
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${(menuData || []).length} –±–ª—é–¥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö`);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –ë–î:', error);
    }
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
loadFromDatabase();

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
app.get('/api/menu', async (req, res) => {
    res.json(menuCache);
});

// API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
app.post('/api/menu', async (req, res) => {
    try {
        const newData = req.body;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—à–µ–ª–µ–∫ –æ—Ç–¥–µ–ª—å–Ω–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if (newData.wallet) {
            try {
                // –ú–∏–≥—Ä–∞—Ü–∏—è dishes –≤ licks –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                if (newData.wallet.dishes !== undefined && newData.wallet.licks === undefined) {
                    newData.wallet.licks = newData.wallet.dishes;
                    delete newData.wallet.dishes;
                }
                
                // –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ—à–µ–ª–µ–∫
                const { error: updateError } = await supabase
                    .from('wallet')
                    .update(newData.wallet)
                    .eq('id', 1);
                
                if (updateError) {
                    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                    const { error: insertError } = await supabase
                        .from('wallet')
                        .insert([{ id: 1, ...newData.wallet }]);
                    
                    if (insertError && insertError.code !== '23505') {
                        console.log('–¢–∞–±–ª–∏—Ü–∞ wallet –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞:', insertError);
                    }
                }
            } catch (e) {
                console.log('–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞:', e.message);
            }
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ–Ω—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if (newData.menu) {
            const currentIds = menuCache.menu.map(item => item.id);
            const newIds = newData.menu.map(item => item.id);
            
            // –£–¥–∞–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ
            const toDelete = currentIds.filter(id => !newIds.includes(id));
            if (toDelete.length > 0) {
                try {
                    const { error } = await supabase
                        .from('menu_items')
                        .delete()
                        .in('id', toDelete);
                    
                    if (error) console.log('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
                } catch (e) {
                    console.log('–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –ë–î');
                }
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
            for (const item of newData.menu) {
                const { id, ...itemData } = item;
                
                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –≤ –Ω–æ–≤—ã–π
                if (itemData.kissPrice && !itemData.prices) {
                    itemData.prices = {
                        kisses: itemData.kissPrice,
                        scratches: 0,
                        massage: 0,
                        licks: 0
                    };
                    delete itemData.kissPrice;
                }
                
                // –ú–∏–≥—Ä–∞—Ü–∏—è dishes –≤ licks
                if (itemData.prices && itemData.prices.dishes !== undefined) {
                    itemData.prices.licks = itemData.prices.dishes;
                    delete itemData.prices.dishes;
                }
                
                try {
                    if (currentIds.includes(id)) {
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
                        const { error } = await supabase
                            .from('menu_items')
                            .update(itemData)
                            .eq('id', id);
                        
                        if (error) console.log('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
                    } else {
                        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
                        const { error } = await supabase
                            .from('menu_items')
                            .insert([{ id, ...itemData }]);
                        
                        if (error) console.log('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', error);
                    }
                } catch (e) {
                    console.log('–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é —Å –ë–î –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞:', id);
                }
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        menuCache = {
            menu: newData.menu || menuCache.menu,
            wallet: newData.wallet || menuCache.wallet,
            lastUpdated: new Date().toISOString()
        };
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        broadcast({
            type: 'update',
            data: menuCache
        });
        
        res.json({ success: true });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
        res.status(500).json({ error: error.message });
    }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
app.get('/health', (req, res) => {
    res.json({ 
        status: 'ok', 
        uptime: process.uptime(),
        itemsCount: menuCache.menu.length,
        lastUpdated: menuCache.lastUpdated,
        database: supabaseUrl !== 'https://your-project.supabase.co' ? 'connected' : 'not configured'
    });
});

// –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞
const server = app.listen(PORT, () => {
    console.log(`
üç≥ –°–µ—Ä–≤–µ—Ä –º–µ–Ω—é –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}!

${process.env.RENDER ? '‚òÅÔ∏è  –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Render.com' : 'üíª –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º'}
üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${supabaseUrl !== 'https://your-project.supabase.co' ? 'Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω' : '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}
    `);
});

// WebSocket —Å–µ—Ä–≤–µ—Ä
const wss = new WebSocket.Server({ 
    server,
    perMessageDeflate: false,
    clientTracking: true
});

const clients = new Set();

function broadcast(message) {
    if (clients.size === 0) return;
    
    const messageStr = JSON.stringify(message);
    const deadClients = new Set();
    
    clients.forEach(client => {
        if (client.readyState === WebSocket.OPEN) {
            try {
                client.send(messageStr);
            } catch (error) {
                console.log('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É:', error.message);
                deadClients.add(client);
            }
        } else {
            deadClients.add(client);
        }
    });
    
    // –£–¥–∞–ª—è–µ–º –º–µ—Ä—Ç–≤—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    deadClients.forEach(client => clients.delete(client));
}

wss.on('connection', (ws, req) => {
    clients.add(ws);
    console.log(`‚úÖ –ù–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ. –í—Å–µ–≥–æ: ${clients.size}`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    try {
        ws.send(JSON.stringify({
            type: 'init',
            data: menuCache
        }));
    } catch (error) {
        console.log('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error.message);
    }
    
    // –ü–∏–Ω–≥ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    const pingInterval = setInterval(() => {
        if (ws.readyState === WebSocket.OPEN) {
            try {
                ws.ping();
            } catch (error) {
                console.log('–û—à–∏–±–∫–∞ ping:', error.message);
                clearInterval(pingInterval);
                clients.delete(ws);
            }
        } else {
            clearInterval(pingInterval);
            clients.delete(ws);
        }
    }, 30000);
    
    ws.on('close', () => {
        clients.delete(ws);
        clearInterval(pingInterval);
        console.log(`‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ. –û—Å—Ç–∞–ª–æ—Å—å: ${clients.size}`);
    });
    
    ws.on('error', (error) => {
        console.error('WebSocket –æ—à–∏–±–∫–∞:', error.message);
        clients.delete(ws);
        clearInterval(pingInterval);
    });
    
    ws.on('pong', () => {
        // –ö–ª–∏–µ–Ω—Ç –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ ping
    });
});

// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç Supabase
if (supabaseUrl !== 'https://your-project.supabase.co') {
    try {
        const subscription = supabase
            .channel('menu_changes')
            .on('postgres_changes', 
                { 
                    event: '*', 
                    schema: 'public', 
                    table: 'menu_items' 
                }, 
                async (payload) => {
                    console.log('üì° –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –ë–î:', payload.eventType);
                    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
                    await loadFromDatabase();
                    broadcast({
                        type: 'update',
                        data: menuCache
                    });
                }
            )
            .subscribe();
    } catch (error) {
        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è Supabase:', error.message);
    }
}
