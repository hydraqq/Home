// server.js - –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤–∞–ª—é—Ç
const express = require('express');
const WebSocket = require('ws');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 3000;

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
let menuData = { 
    menu: [],
    currencies: {
        kiss: 10,      // –ù–∞—á–∞–ª—å–Ω—ã–µ –≤–∞–ª—é—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        massage: 5,
        scratch: 8,
        lick: 3
    },
    tasks: {
        kiss: 0,
        massage: 0,
        scratch: 0,
        lick: 0
    },
    selectedDishes: [],
    lastUpdated: new Date().toISOString()
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Express
app.use(express.static(__dirname));
app.use(express.json());

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
app.get('/api/menu', (req, res) => {
    res.json(menuData);
});

// API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
app.post('/api/menu', (req, res) => {
    // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏
    const newData = req.body;
    
    menuData = {
        menu: newData.menu || menuData.menu,
        currencies: newData.currencies || menuData.currencies,
        tasks: newData.tasks || menuData.tasks,
        selectedDishes: newData.selectedDishes || menuData.selectedDishes,
        lastUpdated: new Date().toISOString()
    };
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    broadcast({
        type: 'update',
        data: menuData
    });
    
    res.json({ success: true });
});

// API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∞–ª—é—Ç–∞–º–∏
app.post('/api/currencies', (req, res) => {
    const { type, amount } = req.body;
    
    if (menuData.currencies.hasOwnProperty(type)) {
        menuData.currencies[type] = Math.max(0, menuData.currencies[type] + amount);
        menuData.lastUpdated = new Date().toISOString();
        
        broadcast({
            type: 'update',
            data: menuData
        });
        
        res.json({ success: true, currencies: menuData.currencies });
    } else {
        res.status(400).json({ error: 'Invalid currency type' });
    }
});

// API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞–Ω–∏—è–º–∏
app.post('/api/tasks', (req, res) => {
    const { type } = req.body;
    
    if (menuData.tasks.hasOwnProperty(type)) {
        menuData.tasks[type] = (menuData.tasks[type] || 0) + 1;
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª—é—Ç—É –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
        menuData.currencies[type] = (menuData.currencies[type] || 0) + 1;
        menuData.lastUpdated = new Date().toISOString();
        
        broadcast({
            type: 'update',
            data: menuData
        });
        
        res.json({ 
            success: true, 
            tasks: menuData.tasks,
            currencies: menuData.currencies 
        });
    } else {
        res.status(400).json({ error: 'Invalid task type' });
    }
});

// API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏
app.post('/api/order', (req, res) => {
    const { action, dishId } = req.body;
    
    if (action === 'add' && dishId) {
        if (!menuData.selectedDishes.includes(dishId)) {
            menuData.selectedDishes.push(dishId);
        }
    } else if (action === 'remove' && dishId) {
        menuData.selectedDishes = menuData.selectedDishes.filter(id => id !== dishId);
    } else if (action === 'process') {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞
        const totalCost = {
            kiss: 0, massage: 0, scratch: 0, lick: 0
        };

        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
        menuData.selectedDishes.forEach(dishId => {
            const dish = menuData.menu.find(item => item.id === dishId);
            if (dish) {
                totalCost.kiss += dish.kissPrice || 0;
                totalCost.massage += dish.massagePrice || 0;
                totalCost.scratch += dish.scratchPrice || 0;
                totalCost.lick += dish.lickPrice || 0;
            }
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
        for (let currency in totalCost) {
            if (totalCost[currency] > menuData.currencies[currency]) {
                return res.status(400).json({ 
                    error: 'Insufficient funds',
                    currency: currency,
                    needed: totalCost[currency],
                    available: menuData.currencies[currency]
                });
            }
        }

        // –°–ø–∏—Å—ã–≤–∞–µ–º –≤–∞–ª—é—Ç—É
        for (let currency in totalCost) {
            menuData.currencies[currency] -= totalCost[currency];
        }

        // –û—á–∏—â–∞–µ–º –∑–∞–∫–∞–∑
        menuData.selectedDishes = [];
        menuData.lastUpdated = new Date().toISOString();
        
        broadcast({
            type: 'update',
            data: menuData
        });
        
        return res.json({ 
            success: true, 
            message: 'Order processed successfully',
            totalCost: totalCost,
            remainingCurrencies: menuData.currencies
        });
    }
    
    menuData.lastUpdated = new Date().toISOString();
    
    broadcast({
        type: 'update',
        data: menuData
    });
    
    res.json({ success: true, selectedDishes: menuData.selectedDishes });
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
app.get('/health', (req, res) => {
    res.json({ 
        status: 'ok', 
        uptime: process.uptime(),
        itemsCount: menuData.menu.length,
        currencies: menuData.currencies,
        tasksCompleted: Object.values(menuData.tasks).reduce((a, b) => a + b, 0),
        lastUpdated: menuData.lastUpdated
    });
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
app.get('/api/stats', (req, res) => {
    const totalDishes = menuData.menu.length;
    const totalTasks = Object.values(menuData.tasks).reduce((a, b) => a + b, 0);
    const totalCurrencies = Object.values(menuData.currencies).reduce((a, b) => a + b, 0);
    const pendingOrders = menuData.selectedDishes.length;
    
    res.json({
        totalDishes,
        totalTasks,
        totalCurrencies,
        pendingOrders,
        currencies: menuData.currencies,
        tasks: menuData.tasks,
        lastUpdated: menuData.lastUpdated
    });
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
app.post('/api/reset', (req, res) => {
    const { confirm } = req.body;
    
    if (confirm === 'RESET_ALL_DATA') {
        menuData = {
            menu: [],
            currencies: {
                kiss: 10,
                massage: 5,
                scratch: 8,
                lick: 3
            },
            tasks: {
                kiss: 0,
                massage: 0,
                scratch: 0,
                lick: 0
            },
            selectedDishes: [],
            lastUpdated: new Date().toISOString()
        };
        
        broadcast({
            type: 'update',
            data: menuData
        });
        
        res.json({ success: true, message: 'All data has been reset' });
    } else {
        res.status(400).json({ error: 'Invalid confirmation code' });
    }
});

// –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞
const server = app.listen(PORT, () => {
    console.log(`
üç≥ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –º–µ–Ω—é –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}!

${process.env.RENDER ? '‚òÅÔ∏è  –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Render.com' : 'üíª –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º'}

üí∞ –í–∞–ª—é—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞
üìù –°–∏—Å—Ç–µ–º–∞ –∑–∞–¥–∞–Ω–∏–π –∞–∫—Ç–∏–≤–Ω–∞
üõí –°–∏—Å—Ç–µ–º–∞ –∑–∞–∫–∞–∑–æ–≤ –∞–∫—Ç–∏–≤–Ω–∞
‚úèÔ∏è  –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª—é–¥ –∞–∫—Ç–∏–≤–Ω–æ

–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –≤–∞–ª—é—Ç:
üíã –ü–æ—Ü–µ–ª—É–π—á–∏–∫–∏: ${menuData.currencies.kiss}
üíÜ –ú–∞—Å—Å–∞–∂–∏–∫–∏: ${menuData.currencies.massage}
ü§ó –ü–æ—á—É—Ö—É—à–∫–∏: ${menuData.currencies.scratch}
üëÖ –õ–∏–∑—É–Ω—ã: ${menuData.currencies.lick}
    `);
});

// WebSocket —Å–µ—Ä–≤–µ—Ä –¥–ª—è real-time —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
const wss = new WebSocket.Server({ server });

// –•—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
const clients = new Set();

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
function broadcast(message) {
    const messageStr = JSON.stringify(message);
    clients.forEach(client => {
        if (client.readyState === WebSocket.OPEN) {
            try {
                client.send(messageStr);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É:', error);
            }
        }
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
wss.on('connection', (ws, req) => {
    clients.add(ws);
    console.log('‚úÖ –ù–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ. –í—Å–µ–≥–æ:', clients.size);
    console.log('   IP:', req.socket.remoteAddress);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
    try {
        ws.send(JSON.stringify({
            type: 'init',
            data: menuData
        }));
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
    }
    
    // –ü–∏–Ω–≥ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    const pingInterval = setInterval(() => {
        if (ws.readyState === WebSocket.OPEN) {
            try {
                ws.ping();
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞:', error);
            }
        }
    }, 30000);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
    ws.on('message', (message) => {
        try {
            const data = JSON.parse(message);
            console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:', data.type || 'unknown');
            
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            if (data.type === 'heartbeat') {
                ws.send(JSON.stringify({ type: 'heartbeat_ack' }));
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:', error);
        }
    });
    
    ws.on('close', (code, reason) => {
        clients.delete(ws);
        clearInterval(pingInterval);
        console.log('‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ. –û—Å—Ç–∞–ª–æ—Å—å:', clients.size);
        console.log('   –ö–æ–¥:', code, '–ü—Ä–∏—á–∏–Ω–∞:', reason.toString());
    });
    
    ws.on('error', (error) => {
        console.error('WebSocket –æ—à–∏–±–∫–∞:', error);
        clients.delete(ws);
        clearInterval(pingInterval);
    });
    
    ws.on('pong', () => {
        // –ö–ª–∏–µ–Ω—Ç –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –ø–∏–Ω–≥ - —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ
    });
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞—Å—ã–ø–∞–Ω–∏—è –Ω–∞ Render
if (process.env.RENDER) {
    setInterval(() => {
        const stats = {
            uptime: Math.floor(process.uptime()),
            clients: clients.size,
            dishes: menuData.menu.length,
            totalCurrency: Object.values(menuData.currencies).reduce((a, b) => a + b, 0),
            totalTasks: Object.values(menuData.tasks).reduce((a, b) => a + b, 0)
        };
        console.log('üíì –°–µ—Ä–≤–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω:', new Date().toLocaleString(), stats);
    }, 5 * 60 * 1000); // –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞
process.on('uncaughtException', (error) => {
    console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
});

// Graceful shutdown
process.on('SIGTERM', () => {
    console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
    broadcast({
        type: 'server_shutdown',
        message: '–°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É'
    });
    
    setTimeout(() => {
        process.exit(0);
    }, 1000);
});

process.on('SIGINT', () => {
    console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
    
    broadcast({
        type: 'server_shutdown',
        message: '–°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É'
    });
    
    setTimeout(() => {
        process.exit(0);
    }, 1000);
});
